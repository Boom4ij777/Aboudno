import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

API_TOKEN = '7416251239:AAGwnGJZukdpjBxPsxxW-8Gaqq6BAYTyZJY'
ADMIN_ID = 7817919248

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
def load_data(filename):
    try:
        with open(filename, 'r') as f:
            return json.load(f)
    except:
        return {}

def save_data(filename, data):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

users = load_data('users.json')
products = load_data('products.json')

def main_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üõç –¢–æ–≤–∞—Ä—ã", callback_data="shop"))
    kb.add(InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"))
    if ADMIN_ID:
        kb.add(InlineKeyboardButton("‚öô –ê–¥–º–∏–Ω–∫–∞", callback_data="admin"))
    return kb

def admin_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"))
    kb.add(InlineKeyboardButton("üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance"))
    kb.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"))
    return kb

@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    uid = str(msg.from_user.id)
    if uid not in users:
        users[uid] = {"balance": 0}
        save_data("users.json", users)
    await msg.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: True)
async def handle_callbacks(call: types.CallbackQuery):
    uid = str(call.from_user.id)

    if call.data == "balance":
        bal = users.get(uid, {}).get("balance", 0)
        await call.message.edit_text(f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}‚ÇΩ", reply_markup=main_menu())

    elif call.data == "shop":
        if not products:
            await call.message.edit_text("üì¶ –ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=main_menu())
            return
        kb = InlineKeyboardMarkup()
        for name, item in products.items():
            kb.add(InlineKeyboardButton(f"{name} - {item['price']}‚ÇΩ", callback_data=f"buy_{name}"))
        kb.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"))
        await call.message.edit_text("üõç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)

    elif call.data == "back":
        await call.message.edit_text("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

    elif call.data == "admin" and call.from_user.id == ADMIN_ID:
        await call.message.edit_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())

    elif call.data == "add_product" and call.from_user.id == ADMIN_ID:
        await call.message.answer("üìù –í–≤–µ–¥–∏ —Ç–æ–≤–∞—Ä:\n\n`–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –¢–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞`", parse_mode="Markdown")
        dp.register_message_handler(add_product, lambda m: m.from_user.id == ADMIN_ID, content_types=types.ContentTypes.TEXT, state="*")

    elif call.data == "add_balance" and call.from_user.id == ADMIN_ID:
        await call.message.answer("üí∏ –í–≤–µ–¥–∏:\n`user_id | —Å—É–º–º–∞`", parse_mode="Markdown")
        dp.register_message_handler(add_balance, lambda m: m.from_user.id == ADMIN_ID, content_types=types.ContentTypes.TEXT, state="*")

    elif call.data.startswith("buy_"):
        name = call.data[4:]
        item = products.get(name)
        if not item:
            await call.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        price = item['price']
        balance = users.get(uid, {}).get("balance", 0)

        if balance < price:
            await call.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            return

        users[uid]["balance"] -= price
        save_data("users.json", users)
        await call.message.answer(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ *{name}*.\n\nüìÉ –í–∞—à —Ç–æ–≤–∞—Ä:\n`{item['text']}`", parse_mode="Markdown")

async def add_product(msg: types.Message):
    try:
        name, price, text = map(str.strip, msg.text.split("|"))
        products[name] = {"price": int(price), "text": text}
        save_data("products.json", products)
        await msg.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    except:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: `–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –¢–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞`")
    dp.unregister_message_handler(add_product)

async def add_balance(msg: types.Message):
    try:
        uid, amount = map(str.strip, msg.text.split("|"))
        amount = int(amount)
        if uid not in users:
            users[uid] = {"balance": 0}
        users[uid]["balance"] += amount
        save_data("users.json", users)
        await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount}‚ÇΩ.")
    except:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `123456789 | 50`")
    dp.unregister_message_handler(add_balance)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)