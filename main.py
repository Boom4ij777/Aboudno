
import json
import asyncio
import os
import random
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
API_TOKEN = os.getenv('BOT_TOKEN', '7416251239:AAGwnGJZukdpjBxPsxxW-8Gaqq6BAYTyZJY')
ADMIN_ID = 7817919248
LOG_CHAT_ID = -1002416113206  # ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class AdminStates(StatesGroup):
    waiting_for_product_name = State()
    waiting_for_product_description = State()
    waiting_for_product_price = State()
    waiting_for_product_text = State()
    waiting_for_balance = State()
    waiting_for_balance_amount = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
def load_data(filename):
    try:
        with open(filename, 'r') as f:
            return json.load(f)
    except:
        return {}

def save_data(filename, data):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

users = load_data('users.json')
products = load_data('products.json')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def log_action(action, user_id, details=""):
    logs = load_data('logs.json')
    if 'logs' not in logs:
        logs['logs'] = []
    
    log_entry = {
        'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'action': action,
        'user_id': str(user_id),
        'details': details
    }
    logs['logs'].append(log_entry)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–æ–≥–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 –∑–∞–ø–∏—Å–µ–π
    if len(logs['logs']) > 100:
        logs['logs'] = logs['logs'][-100:]
    
    save_data('logs.json', logs)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ —á–∞—Ç
    asyncio.create_task(send_log_to_chat(log_entry))

async def send_log_to_chat(log_entry):
    try:
        emoji = ""
        if log_entry['action'] == 'purchase':
            emoji = "üõí"
        elif log_entry['action'] == 'new_user':
            emoji = "üëã"
        elif log_entry['action'] == 'start':
            emoji = "‚ñ∂Ô∏è"
        elif log_entry['action'] == 'add_product':
            emoji = "üì¶"
        elif log_entry['action'] == 'add_balance':
            emoji = "üí∞"
        elif log_entry['action'] == 'buy_failed':
            emoji = "‚ùå"
        elif log_entry['action'] == 'product_sold_out':
            emoji = "üì≠"
        elif log_entry['action'] == 'admin_access':
            emoji = "‚öôÔ∏è"
        elif log_entry['action'] == 'check_balance':
            emoji = "üí≥"
        elif log_entry['action'] == 'visit_shop':
            emoji = "üõçÔ∏è"
        else:
            emoji = "‚ÑπÔ∏è"
        
        log_message = f"{emoji} **{log_entry['timestamp']}**\n"
        log_message += f"üë§ **User ID:** `{log_entry['user_id']}`\n"
        log_message += f"üìù **Action:** {log_entry['action']}\n"
        log_message += f"üìÑ **Details:** {log_entry['details']}"
        
        await bot.send_message(
            chat_id=LOG_CHAT_ID,
            text=log_message,
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ —á–∞—Ç: {e}")

def main_menu(user_id=None):
    buttons = [
        [InlineKeyboardButton(text="üõç –¢–æ–≤–∞—Ä—ã", callback_data="shop")],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")]
    ]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
    if user_id == ADMIN_ID:
        buttons.append([InlineKeyboardButton(text="‚öô –ê–¥–º–∏–Ω–∫–∞", callback_data="admin")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return kb

def admin_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")],
        [InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="show_logs")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    return kb

@dp.message(Command("start"))
async def start(message: types.Message):
    uid = str(message.from_user.id)
    if uid not in users:
        users[uid] = {"balance": 0}
        save_data("users.json", users)
        log_action("new_user", uid, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}")
    log_action("start", uid, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu(message.from_user.id))

@dp.callback_query(F.data == "balance")
async def show_balance(call: types.CallbackQuery):
    uid = str(call.from_user.id)
    bal = users.get(uid, {}).get("balance", 0)
    log_action("check_balance", uid, f"–ü—Ä–æ–≤–µ—Ä–∏–ª –±–∞–ª–∞–Ω—Å: {bal}‚ÇΩ")
    await call.message.edit_text(f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}‚ÇΩ", reply_markup=main_menu(call.from_user.id))

@dp.callback_query(F.data == "shop")
async def show_shop(call: types.CallbackQuery):
    uid = str(call.from_user.id)
    log_action("visit_shop", uid, "–ü–æ—Å–µ—Ç–∏–ª –º–∞–≥–∞–∑–∏–Ω")
    
    if not products:
        await call.message.edit_text("üì¶ –ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=main_menu(call.from_user.id))
        return
    
    buttons = []
    total_items = 0
    for name, item in products.items():
        desc = item.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        texts = item.get('texts', [item.get('text', '')])
        quantity = len([t for t in texts if t])
        total_items += quantity
        
        if quantity > 0:
            button_text = f"{name}\n{desc} - {item['price']}‚ÇΩ ({quantity} —à—Ç.)"
        else:
            button_text = f"{name}\n{desc} - {item['price']}‚ÇΩ (–ù–µ—Ç –∫–ª—é—á–µ–π)"
        
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"buy_{name}")])
    
    if not buttons:
        await call.message.edit_text("üì¶ –ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=main_menu(call.from_user.id))
        return
        
    buttons.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.edit_text(f"üõç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:\nüìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_items} —à—Ç.", reply_markup=kb)

@dp.callback_query(F.data == "back")
async def back_to_main(call: types.CallbackQuery):
    await call.message.edit_text("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(call.from_user.id))

@dp.callback_query(F.data == "admin")
async def show_admin(call: types.CallbackQuery):
    if call.from_user.id == ADMIN_ID:
        log_action("admin_access", call.from_user.id, "–í–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        await call.message.edit_text("‚öô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())

@dp.callback_query(F.data == "add_product")
async def request_product_name(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id == ADMIN_ID:
        await call.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AdminStates.waiting_for_product_name)

@dp.callback_query(F.data == "add_balance")
async def show_users_for_balance(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id == ADMIN_ID:
        if not users:
            await call.message.edit_text("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=admin_menu())
            return
        
        buttons = []
        for uid, user_data in users.items():
            balance = user_data.get('balance', 0)
            buttons.append([InlineKeyboardButton(
                text=f"ID: {uid} (–ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ)", 
                callback_data=f"select_user_{uid}"
            )])
        buttons.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await call.message.edit_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=kb)

@dp.callback_query(F.data == "show_logs")
async def show_logs(call: types.CallbackQuery):
    if call.from_user.id == ADMIN_ID:
        logs = load_data('logs.json')
        if 'logs' not in logs or not logs['logs']:
            await call.message.edit_text("üìã –õ–æ–≥–∏ –ø—É—Å—Ç—ã", reply_markup=admin_menu())
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É
        log_text = "üìã –õ–û–ì–ò –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô\n"
        log_text += "=" * 35 + "\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_stats = {}
        for log in logs['logs']:
            uid = log['user_id']
            if uid not in user_stats:
                user_stats[uid] = {
                    'purchases': 0,
                    'total_spent': 0,
                    'last_activity': log['timestamp']
                }
            
            if log['action'] == 'purchase':
                user_stats[uid]['purchases'] += 1
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ –¥–µ—Ç–∞–ª–µ–π
                try:
                    amount = int(log['details'].split('–∑–∞ ')[1].split('‚ÇΩ')[0])
                    user_stats[uid]['total_spent'] += amount
                except:
                    pass
            
            user_stats[uid]['last_activity'] = log['timestamp']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user_stats:
            log_text += "üë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n"
            for uid, stats in user_stats.items():
                log_text += f"üì± ID: {uid}\n"
                log_text += f"üõí –ü–æ–∫—É–ø–æ–∫: {stats['purchases']}\n"
                log_text += f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {stats['total_spent']}‚ÇΩ\n"
                log_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_activity']}\n\n"
        
        log_text += "üìù –ü–û–°–õ–ï–î–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø:\n"
        log_text += "-" * 25 + "\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π —Å —ç–º–æ–¥–∑–∏
        for log in logs['logs'][-15:]:
            emoji = ""
            if log['action'] == 'purchase':
                emoji = "üõí"
            elif log['action'] == 'new_user':
                emoji = "üëã"
            elif log['action'] == 'start':
                emoji = "‚ñ∂Ô∏è"
            elif log['action'] == 'add_product':
                emoji = "üì¶"
            elif log['action'] == 'add_balance':
                emoji = "üí∞"
            elif log['action'] == 'buy_failed':
                emoji = "‚ùå"
            elif log['action'] == 'product_sold_out':
                emoji = "üì≠"
            else:
                emoji = "‚ÑπÔ∏è"
            
            log_text += f"{emoji} {log['timestamp']}\n"
            log_text += f"üë§ {log['user_id']}: {log['details']}\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(log_text) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
            part1 = log_text[:4000]
            last_newline = part1.rfind('\n\n')
            if last_newline > 0:
                part1 = part1[:last_newline]
            
            await call.message.edit_text(part1 + "\n\nüìÑ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ...", reply_markup=admin_menu())
        else:
            await call.message.edit_text(log_text, reply_markup=admin_menu())

@dp.callback_query(F.data.startswith("select_user_"))
async def select_user_for_balance(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id == ADMIN_ID:
        uid = call.data[12:]  # Remove "select_user_" prefix
        await state.update_data(selected_user_id=uid)
        await call.message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}:")
        await state.set_state(AdminStates.waiting_for_balance_amount)

@dp.callback_query(F.data.startswith("buy_"))
async def buy_product(call: types.CallbackQuery):
    uid = str(call.from_user.id)
    name = call.data[4:]
    item = products.get(name)
    
    if not item:
        log_action("buy_failed", uid, f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {name}")
        await call.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    texts = item.get('texts', [item.get('text', '')])
    available_texts = [t for t in texts if t]
    
    if not available_texts:
        log_action("buy_failed", uid, f"–ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {name}")
        await call.message.answer("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
        return

    price = item['price']
    balance = users.get(uid, {}).get("balance", 0)

    if balance < price:
        log_action("buy_failed", uid, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è {name} (–Ω—É–∂–Ω–æ: {price}, –µ—Å—Ç—å: {balance})")
        await call.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    selected_text = random.choice(available_texts)
    texts.remove(selected_text)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é, –Ω–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤)
    item['texts'] = texts
    
    if 'text' in item:
        del item['text']  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ text
    
    users[uid]["balance"] -= price
    save_data("users.json", users)
    save_data("products.json", products)
    
    log_action("purchase", uid, f"–ö—É–ø–∏–ª {name} –∑–∞ {price}‚ÇΩ")
    await call.message.answer(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ *{name}*.\n\nüìÉ –í–∞—à —Ç–æ–≤–∞—Ä:\n`{selected_text}`", parse_mode="Markdown")

@dp.message(AdminStates.waiting_for_product_name)
async def get_product_name(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await state.update_data(name=message.text.strip())
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AdminStates.waiting_for_product_description)

@dp.message(AdminStates.waiting_for_product_description)
async def get_product_description(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await state.update_data(description=message.text.strip())
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        await state.set_state(AdminStates.waiting_for_product_price)

@dp.message(AdminStates.waiting_for_product_price)
async def get_product_price(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        try:
            price = int(message.text.strip())
            await state.update_data(price=price)
            await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ (–∫–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n"
                               "–ü—Ä–∏–º–µ—Ä:\n"
                               "–ö–ª—é—á1: ABC123\n"
                               "–ö–ª—é—á2: DEF456\n"
                               "–ö–ª—é—á3: GHI789")
            await state.set_state(AdminStates.waiting_for_product_text)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ:")

@dp.message(AdminStates.waiting_for_product_text)
async def add_product_final(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        data = await state.get_data()
        name = data['name']
        description = data['description']
        price = data['price']
        texts_input = message.text.strip()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä)
        texts = [text.strip() for text in texts_input.split('\n') if text.strip()]
        
        products[name] = {
            "description": description,
            "price": price,
            "texts": texts
        }
        save_data("products.json", products)
        
        log_action("add_product", message.from_user.id, f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name} ({len(texts)} —à—Ç.)")
        
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                           f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                           f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                           f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
                           f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(texts)} —à—Ç.")
        await state.clear()

@dp.message(AdminStates.waiting_for_balance_amount)
async def add_balance_amount(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        try:
            amount = int(message.text.strip())
            data = await state.get_data()
            uid = data['selected_user_id']
            
            if uid not in users:
                users[uid] = {"balance": 0}
            
            old_balance = users[uid]["balance"]
            users[uid]["balance"] += amount
            new_balance = users[uid]["balance"]
            
            save_data("users.json", users)
            log_action("add_balance", message.from_user.id, f"–ü–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å {uid}: +{amount}‚ÇΩ ({old_balance}‚ÇΩ ‚Üí {new_balance}‚ÇΩ)")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
            try:
                await bot.send_message(
                    chat_id=int(uid),
                    text=f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ!\n"
                         f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ"
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
            
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount}‚ÇΩ\n"
                               f"üí≥ –ë–∞–ª–∞–Ω—Å: {old_balance}‚ÇΩ ‚Üí {new_balance}‚ÇΩ\n"
                               f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ:")
            return
        except Exception as e:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
        await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
